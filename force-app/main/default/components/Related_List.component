<apex:component controller="Related_ListController" allowDML="true" id="relatedlistcomponent">
    <style>
    .clickableHeader {
        cursor: pointer;
        width: 100%;
    }
    .paginatorWrap {
        background: url("/img/alohaSkin/listFooter.png") repeat-x scroll 0 0 #F2F2F2;
        border: 1px solid #EAEAEA;
        background-color: #F3F3F3;
        border-top: 1px solid #FFFFFF;
        padding: 5px;
    }

    .noRecordsFound {
        border: 1px solid #D4DADC;
        padding: 4px;
    }

    .imageAsc {
        background: url("/img/alohaSkin/sortArrows.png") no-repeat scroll left top transparent;
        height: 8px;
        margin: 0 5px;
        vertical-align: -1px;
        width: 7px;
    }

    .imageDesc {
        background: url("/img/alohaSkin/sortArrows.png") no-repeat scroll 0px -12px transparent;
        background-repeat: no-repeat;
        height: 8px;
        margin: 0 5px;
        vertical-align: -1px;
        width: 7px;
    }

    .pShowMore{
        padding: 9px 0 2px 5px;
        text-align: left;
        display: block;
    }
    .noRowsHeader {
        border: 1px solid rgb(221, 213, 213);
        background-color: #f8f8f8;
        background-image: none;
        font-size: 0.9em;
        font-weight: normal;
        padding: 5px;
    }
    </style>
    <apex:includeScript value="/support/console/40.0/integration.js"/>
    <apex:includeScript value="/support/console/40.0/collection.js"/>
    <apex:attribute name="p_fieldsCSV" type="String" assignTo="{!fieldsCSV}" description="Comma separated list of API field names that will be displayed in the relatedList. If defined, this will override the fieldsList attribute."/>
    <apex:attribute name="p_fieldsList" type="String[]" assignTo="{!fieldsList}" description="List collection variable containing the API field names that will be displayed in the related list."/>
    <apex:attribute name="p_filter" type="string" assignTo="{!filter}" description="Additional filter criteria applied to the objects returned. This shoud not start with 'where' keyworld, simply 'Active = true AND ...'."/>

    <apex:attribute name="p_hideActionLinks" type="Boolean" description="If set to true this will hide the Action links in the first column."/>
    <apex:attribute name="p_hideButtons" type="Boolean" description="Hide the New button, button will only be displayed if current user has create permission on this object."/>
    <apex:attribute name="p_actionToInvoke" type="ApexPages.Action" description="Specify a function that needs to be execute on the 'New' button."/>
    <apex:attribute name="p_objectName" type="String" assignTo="{!objectName}" description="The API name of the object representing this related list" required="true"/>
    <apex:attribute name="p_orderByFieldName" type="String" assignTo="{!orderByFieldName}" description="List of records will be ordered by this field on initial load of the related list."/>
    <apex:attribute name="p_pageSize" type="Integer" assignTo="{!pageSize}" description="Sets the number of records in each page set."/>
    <apex:attribute name="p_parentFieldId" type="String" assignTo="{!searchFieldValue}" description="The 15 or 18 digit Id of the parent record for this related list." required="true"/>
    <apex:attribute name="p_parentFieldName" type="String" assignTo="{!searchFieldName}" description="The API name of the relationship field for the related list. For example: AccountId on Opportunity object." required="true"/>
    <apex:attribute name="p_sortDirection" type="String" assignTo="{!sortDirection}" description="Initial sort order of the related list on load. Valid values are 'asc' and 'desc'."/>
    <apex:attribute name="p_title" type="String" assignTo="{!title}" description="overrides the standard object plural label if provided"/>
    <apex:attribute name="p_moreLink" type="String" assignTo="{!moreLink}" description="target url for the more>> link"/>
    <apex:attribute name="p_returnUrl" type="String" assignTo="{!returnUrl}" description="Please define the return URL."/>
    <apex:attribute name="p_showAsStandardRelatedList" type="Boolean" assignTo="{!showAsStandardRelatedList}" description="Please set to true if need to display related list in standard style ( Without pagination options )."/>

    <apex:pageBlock id="pageBlock"  title="{!IF(p_title != null, title, objectDescribe.LabelPlural)}">
     <apex:actionstatus id="myStatus">
            <apex:facet name="start">
            <div class="waitingSearchDiv" style="background-color: #fbfbfb; height: 100%; opacity: 0.65; width: 100%;">
              <div class="waitingHolder" style="top: 50px; width: 91px;">
                <img class="waitingImage" src="/img/loading.gif" title="Please Wait..." />
                <span class="waitingDescription">Loading...</span>
              </div>
            </div>
        </apex:facet>

        </apex:actionstatus>
       <apex:pageBlockButtons location="top" >
          <apex:commandButton rendered="{!IF(p_hideButtons,false,true)}" value="New {!objectDescribe.label}" action="{!p_actionToInvoke}" status="status"/>
<!--          <apex:commandButton rendered="{!IF(p_hideButtons,false,true)}" value="Cancel" onclick="window.location.href = '{!p_returnUrl}'; return false;" />-->

<!--           <apex:actionStatus onStart="lockScreen(true)" id="myStatus" onstop="lockScreen(false)"/> -->
      </apex:pageBlockButtons>

      <apex:outputPanel rendered="{!OR(ISNULL(records),records.size == 0)}" >
        <div class="noRowsHeader">No records to display</div>
       </apex:outputPanel>

      <apex:outputPanel styleClass="dataBlock" >
       <apex:pageBlockTable value="{!records}" var="r" rendered="{!AND(NOT(ISNULL(records)),records.size > 0)}" >

          <apex:column headerValue="Action" rendered="{!IF(p_hideActionLinks,false,true)}" styleClass="actionColumn">
                <!-- modified by ravinder reddy for return nurl -->          
                <apex:outputLink rendered="{!AND($ObjectType[objectName].accessible, $ObjectType[objectName].updateable)}" value="/{!r.Id}/e?retURL={!accId}" styleClass="actionLink edit{!r.Id}" onclick="makeLinksTargetToOpenAsParent();">Edit</apex:outputLink>
                <apex:outputText rendered="{!AND($ObjectType[objectName].accessible, $ObjectType[objectName].updateable)}"> |&nbsp; </apex:outputText>
                <apex:commandLink rendered="{!AND($ObjectType[objectName].accessible, $ObjectType[objectName].deletable)}" value="Del" onclick="if(!confirm('Are you sure?')) return false;" action="{!deleteRecord}" rerender="pageBlock" styleClass="actionLink" status="myStatus" oncomplete="refreshParent()">
                    <apex:param name="deleteRecordId" assignTo="{!deleteRecordId}" value="{!r.id}"/>
                </apex:commandLink>
            </apex:column>

             <!-- Loop through list of field names to dynamically render the correct columns -->
            <apex:repeat value="{!fieldNames}" var="fld">

                <apex:column headerClass="{!fieldAlignMap[fld]}" styleClass="{!fieldAlignMap[fld]}">
                    <apex:facet name="header">
                        <apex:outputPanel layout="block" styleClass="clickableHeader">

                            <apex:actionSupport event="onclick" action="{!sortByFieldAction}" rerender="pageBlock" status="myStatus" oncomplete="makeLinksTargetToOpenAsParent();">
                                <apex:param name="sortByField" value="{!fld}" assignTo="{!sortByField}"/>

                            </apex:actionSupport>


                            <apex:outputText rendered="{!fld <> 'RecordTypeId'}"> {!nameLabelMap[fld]} </apex:outputText>
                            <apex:outputText rendered="{!fld == 'RecordTypeId'}"> Record Type </apex:outputText>


                            <apex:outputPanel id="directionIcon" rendered="{!sortByField = fld}">
                                <apex:image styleClass="imageDesc" value="/s.gif" rendered="{!fieldSortDirectionMap[fld] = 'desc'}"/>
                                <apex:image styleClass="imageAsc" value="/s.gif" rendered="{!fieldSortDirectionMap[fld] = 'asc'}"/>
                            </apex:outputPanel>
                        </apex:outputPanel>
                    </apex:facet>
                    <div class="recordLink">
                    <apex:outputField value="{!r[fld]}" rendered="{!AND(fld <> 'Name', NOT(AND(p_objectName == 'Case', OR( fld == 'CaseNumber', fld == 'Subject'))))}" />
                    <apex:outputlink value="/{!r.Id}" target="_top" rendered="{!OR(fld=='Name', AND(p_objectName == 'Case', OR( fld == 'CaseNumber', fld == 'Subject')))}" >{!r[fld]}</apex:outputlink>
                    </div>
                </apex:column>
            </apex:repeat>
       </apex:pageBlockTable>
        </apex:outputPanel>

       <apex:outputPanel layout="block" styleClass="pShowMore" rendered="{!AND(showAsStandardRelatedList, records.size > 0, NOT(ISNULL(pageSize)))}">


                    <apex:commandLink styleClass="btnLink" value="{!showMoreLink}" action="{!showMore}" rerender="pageBlock" status="myStatus" rendered="{!showAsStandardRelatedList}" oncomplete="makeLinksTargetToOpenAsParent();">
                    </apex:commandLink>
                    <apex:outputText rendered="{!AND(NOT(ISBLANK(p_moreLink)),NOT(ISBLANK(showMoreLink)))}">&nbsp;|&nbsp;</apex:outputText>
                    <apex:outputLink rendered="{!NOT(ISBLANK(p_moreLink))}" value="{!p_moreLink}">Go to list ({!ssc.ResultSize}) ï¿½</apex:outputLink>

       </apex:outputPanel>
       <apex:outputPanel layout="block" styleClass="paginatorWrap" rendered="{!AND(NOT(showAsStandardRelatedList), records.size > 0, NOT(ISNULL(pageSize)))}">
            <div class="paginator">

                <span class="prevNextLinks">

                    <span class="prevNext">
                        <!-- Show first button if page set has previous page-->
                        <apex:commandLink styleClass="btnLink" value="" action="{!ssc.first}" rendered="{!ssc.pageNumber != 1}" rerender="pageBlock" title="First" status="myStatus" oncomplete="makeLinksTargetToOpenAsParent();">
                            <img class="first" src="/s.gif" alt="" />
                        </apex:commandLink>


                        <apex:outputPanel rendered="{!NOT(ssc.hasPrevious)}">
                            <img class="firstoff" src="/s.gif" alt="" />
                        </apex:outputPanel>
                    </span>

                    <!-- Previous Button -->
                    <span class="prevNext">

                        <apex:commandLink styleClass="btnLink" value="" action="{!ssc.previous}" rendered="{!ssc.hasPrevious}" rerender="pageBlock" status="myStatus" oncomplete="makeLinksTargetToOpenAsParent();">
                            <img class="prev" src="/s.gif" alt="" />Previous
                        </apex:commandLink>


                        <apex:outputPanel rendered="{!NOT(ssc.hasPrevious)}">
                            <img class="prevoff" src="/s.gif" alt="" />Previous
                        </apex:outputPanel>
                    </span>


                    <span class="prevNext">
                        <!-- Show next button if page set has next -->
                        <apex:commandLink styleClass="btnLink" value="" action="{!ssc.next}" rendered="{!ssc.hasNext}" rerender="pageBlock" status="myStatus" oncomplete="makeLinksTargetToOpenAsParent();">
                            Next<img class="next" alt="Next" title="Next" src="/s.gif" />
                        </apex:commandLink>


                        <apex:outputPanel rendered="{!NOT(ssc.hasNext)}">
                            Next<img class="nextOff" alt="Next" title="Next" src="/s.gif" />
                        </apex:outputPanel>
                    </span>

                    <!-- Last Button -->
                    <span class="prevNext">
                        <!-- Show last button if page set has next -->
                        <apex:commandLink styleClass="btnLink" value="" action="{!ssc.last}" rendered="{!ssc.hasNext}" title="Last" rerender="pageBlock" status="myStatus" oncomplete="makeLinksTargetToOpenAsParent();">
                            <img class="last" src="/s.gif" alt="" />
                        </apex:commandLink>

                        <!-- Show disabled last button if page set has no next -->
                        <apex:outputPanel rendered="{!NOT(ssc.hasNext)}">
                            <img class="lastoff" src="/s.gif" alt="" />
                        </apex:outputPanel>
                    </span>
                </span>
                <span class="right">
                    Page&nbsp;

                   <!--<apex:inputText value="{!ssc.pageNumber}" styleClass="pageInput"  onkeypress="return isNumber(event,this)">
                        <apex:actionSupport event="onchange" rerender="pageBlock" status="myStatus" oncomplete="makeLinksTargetToOpenAsParent();"/>
                    </apex:inputText>-->

                    {!ssc.pageNumber} of {!CEILING(ssc.ResultSize / ssc.pageSize)}

                </span>
            </div>
        </apex:outputPanel>


    </apex:pageBlock>

    <script>
    var returlStr;
     function isNumber(evt,obj) {
         evt = (evt) ? evt : window.event;
         var charCode = (evt.which) ? evt.which : evt.keyCode;
         if(charCode == 13){

             obj.onchange();
             return false;
         }
         if (charCode > 31 && (charCode < 48 || charCode > 57)) {
             return false;
         }
         return true;
     }


     // T-376900 - Added functinality for anchor tag in console or non console enviornment
     //Created By : Kirti Agarwal
     var recordId;
     var editRecordId;
     var subtabName;
     //Make link as 'open in new tab' for console and other enviorment
     function makeLinksTargetToOpenAsParent() {
       var blocks = document.getElementsByClassName("dataBlock");
       for (var b in blocks) {
         var anchors = document.getElementsByTagName("a");
         for (var i in anchors) {
           if (sforce.console.isInConsole()) {
             if (anchors[i].className != undefined && anchors[i].className.indexOf(
                 'edit') < 0 && anchors[i].className.indexOf('actionLink') < 0 && anchors[i].className.indexOf('btnLink') < 0  ) {
               var urlString = anchors[i].href;
               if (urlString != undefined) {
                 anchors[i].href = "javascript:void(0)";
                 anchors[i].onclick = opentab;
               }
             } else {
               if (anchors[i].className != undefined && anchors[i].className.indexOf(
                   'edit') > -1) {
                 anchors[i].href = "javascript:void(0)";
                 anchors[i].onclick = opentabForEdit;
               }
             }
           } else {
             if (anchors[i].className != undefined && anchors[i].className.indexOf(
                 'edit') < 0 && anchors[i].className.indexOf('actionLink')) {
               anchors[i].target = "_blank";
             } else if (anchors[i].className != undefined && anchors[i].className
               .indexOf('edit') > -1) {
               anchors[i].target = "_top";
             }
           }
         }
       }
     }

     //funtionality for open sub tab in console for Edit link
     function opentabForEdit(e) {
       if (this.className != undefined && this.className != null) {
         var IdString = this.className.substring(15, 34);
         editRecordId = '/' + IdString + '/e?';
         sforce.console.getEnclosingPrimaryTabId(openSubtabForEdit);
       }
     }

     //used to open sub tab in console for Edit link
     var openSubtabForEdit = function openSubtabForEdit(result) {
       //Now that we have the primary tab ID, we can open a new subtab in it
       var primaryTabId = result.id;
       sforce.console.openSubtab(primaryTabId, editRecordId, true,
         '', null);
     };

     //funtionality for open sub tab in console for lookup link
     function opentab(e) {
       var anchorEle = document.getElementById(this.id);
       if (anchorEle != undefined) {
         var indexOfId = anchorEle.id;
         if (indexOfId != undefined) {
           var IdString = indexOfId.substring(6, 21);
           recordId = IdString;
           subtabName = anchorEle.innerText;
           sforce.console.getEnclosingPrimaryTabId(openSubtab);
         }
       }
     }

     //used to open sub tab in console for Edit link
     var openSubtab = function openSubtab(result) {
       //Now that we have the primary tab ID, we can open a new subtab in it
       var primaryTabId = result.id;
       sforce.console.openPrimaryTab(null, '/' + recordId, true,
         subtabName, null);
     };
     makeLinksTargetToOpenAsParent();
     // end T-376900
     function refreshParent() {
      window.parent.location.href='/{!accid}';
      
    }
     
    </script>

   <c:WaitingComponent />
</apex:component>