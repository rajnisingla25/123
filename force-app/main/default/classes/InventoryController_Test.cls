@isTest
private class InventoryController_Test{
    private static Account newAccount;
    public static testMethod void main1(){

      DisabledTrigger__c Dtrg         	= new DisabledTrigger__c(Name= 'Disabled',TaskTrigger__c = 'Test@test.com',AssetTrigger__c = 'test@test.com');
        insert Dtrg;

        newAccount = new Account();
        newAccount.name = 'XYZ';
        newAccount.Phone = '+49-12345';
        newAccount.BillingStreet = 'Am Tierpark 16';
        newAccount.BillingCity = 'Cologne';
        newAccount.BillingPostalCode = '54321';
        newAccount.BillingState = 'Nordrhein-Westfalen';
        newAccount.BillingCountry = 'Germany';
        newAccount.Primary_Email__c = 'ra@gmail.com';
        newAccount.Home_Phone__c = '1234567890';
        newAccount.Work_Phone__c = '1234567890';
        newAccount.Mobile1__c = '1234567890';
        newAccount.Mobile2_Other__c = '1234567890';
        newAccount.party_id__c = '';
        Database.insert(newAccount);
       
        ApexPages.StandardController sc1 = new ApexPages.standardController(newAccount);
        InventoryController obj1 = new InventoryController(sc1);
        obj1.StoreMainParameters();
        obj1.setToken('m');
        obj1.getToken();
        obj1.setDegree('m');
        obj1.getDegree();
        obj1.setSlotSize('m');
        obj1.getSlotSize();
        obj1.setLeadRoutingType('m');
        obj1.getLeadRoutingType();
        obj1.setStatus('m');
        obj1.getStatus();
        obj1.setJson('m');
        obj1.getJson();
        obj1.setAccountId('m');
        obj1.getAccountId();
        obj1.setNotes('m');
        obj1.getNotes();
        obj1.setqtyinterested('m');
        obj1.getqtyinterested();
        obj1.setoperation('m');
        obj1.getoperation();
        obj1.getMyOrderBy();
        obj1.setMyOrderBy('m');
        obj1.getMyFilter();
        obj1.setMyFilter('m');
        obj1.getMyLimit();
        obj1.setMyLimit('m');
        obj1.getWaitlistStatus();
        obj1.getAccountName();
        obj1.setWaitlistStatus('m');
        obj1.makeSOACallforGet();
        obj1.getWaitlistStatusItems();
        obj1.getFilterList();
        obj1.setFilterType('m');
        obj1.getInputList();
        obj1.getInputType();
        obj1.setInputType('m');
        obj1.setInputValue('m');
        obj1.getInputValue();
        obj1.submit();
        obj1.SetPageSize();
        String mFilterType;
        String o = mFilterType;
        String WaitlistStatus;
        String p = WaitlistStatus;
         o = 'Assigned AE';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        o = 'Waitlist Status';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        
        o = 'Waitlist Type';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        o = 'Inventory Available Flex';
        p = 'Greater than Zero';
        obj1.setWaitlistStatus(p);
        obj1.getWaitlistStatusItems();
        p = 'Greater than 1';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 5';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 10';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 50';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 25';
        obj1.setWaitlistStatus(p);
        obj1.setFilterType(o);
        obj1.setWaitlistStatus(p);
        o = 'Inventory Available Fast';
        p = 'Greater than Zero';
        obj1.setWaitlistStatus(p);
        obj1.getWaitlistStatusItems();
        p = 'Greater than 1';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 5';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 10';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 50';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 25';
        obj1.setWaitlistStatus(p);
        obj1.setFilterType(o);
        obj1.setWaitlistStatus(p);
        o = 'Presales Available Flex';
        p = 'Greater than Zero';
        obj1.setWaitlistStatus(p);
        obj1.getWaitlistStatusItems();
        p = 'Greater than 1';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 5';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 10';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 50';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 25';
        obj1.setWaitlistStatus(p);
        obj1.setFilterType(o);
        obj1.setWaitlistStatus(p);
        o = 'Presales Available Fast';
        p = 'Greater than Zero';
        obj1.setWaitlistStatus(p);
        obj1.getWaitlistStatusItems();
        p = 'Greater than 1';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 5';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 10';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 50';
        obj1.setWaitlistStatus(p);
        p = 'Greater than 25';
        obj1.setWaitlistStatus(p);
        obj1.setFilterType(o);
        obj1.setWaitlistStatus(p);
        o = 'Product';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        o = 'Input AE';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        o = 'No of Records';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        o = 'Market';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        o = 'Customer';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        o = 'Inventory Pool';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        o = 'Page No';
        obj1.setFilterType(o);
        obj1.getWaitlistStatusItems();
        obj1.setWaitlistStatus(p);
        obj1.getWaitlistStatusItems();
        obj1.getFilterType();
        //obj1.get_formatted_date('m');
        InventoryController.Invlist INV = new InventoryController.Invlist('reservation_id','transaction_id','line_item_id','product_name','product_type','product_size','inventory_pool','lead_type','market_name','market_state_id','reserved_quantity','market_id','party_id','lock_release_date','inventory_status','created_date','UpdatedDate');
        List<InventoryController.Invlist> INV1 = new List<InventoryController.Invlist>();
        Waitlist_Urls__c testSetting = new Waitlist_Urls__c();
        testSetting.Name = 'Test URL';
        testSetting.URL__c = 'http://dev-es-i.api.move.com/reservations/';
        insert testSetting;
        
        //obj1.accountwaitlist();
        Test.startTest();
        Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator());

		insert new Waitlist_Urls__c(Name='GetAllReservations', URL__c = 'https://dev-es-i.api.move.com/reservations?format=json');
		
        INV1 = obj1.GetWaitlistfromWebService();
        Test.stopTest();
        //InventoryController.WLJson IWLS = new InventoryController.WLJson();
        List<InventoryController.WLJson> IWList = new List<InventoryController.WLJson>();
        //IWlist.add(IWLS);
        InventoryController.WLMaster IWL = new InventoryController.WLMaster('reservation_id',IWlist,'lock_release_date');
        
        InventoryController.WLJson INVWL = new InventoryController.WLJson('transaction_id','line_item_id','product_name','product_type','product_size','inventory_pool','lead_type','market_name','market_state_id','reserved_quantity','market_id','party_id','lock_release_date','inventory_status','created_date','UpdatedDate');
        obj1.callHTTP();
        obj1.CallReservationsUsingHTTP('mymethod','ReservationID'); 
        List<SelectOption> opts = new List<SelectOption>();
        opts = obj1.getWaitlistStatusItems();
        System.assertNotEquals(opts,null);
    }    
}