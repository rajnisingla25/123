@isTest
public class Commissions_CreateNewCommissions_Test {
    private static Boolean IsUpdate;
    public static testMethod void mainTest1() {
        String ManagerTeam = Commissions_Constants.MANAGERS_TEAM;
        String WLVTerritory = Commissions_Constants.WLV_TERRITORY_TEAM;  
        string status = Constants.ACTIVE_STATUS;
        string fullfilled = Constants.FULFILLMENT_STATUS;
        string type1 = Constants.ASSET_TYPE;
        string type = Constants.OFFICE_ACCOUNT_TYPE;
        Integer Year = Date.Today().Year(); 
        List<user> allUsers = new  List<user>();
        Profile p = [select id from profile where name='System Administrator'];
        User user2 = Commissions_TestDataFactory.createUser(Null,p.id,null,'test1541@move.com','test1541@move.com',false,ManagerTeam);
        user2.Vacation_Start_Date__c = Date.today();
        user2.Vacation_End_Date__c = Date.today();
        User2.Team__c = ManagerTeam;
        User2.LastName ='Riggio';
        User2.FirstName='Heather';
        allUsers.add(User2);
        //Insert User2;
        
        User user1 = Commissions_TestDataFactory.createUser(null,p.id,null,'test154@move.com','test154@move.com',false,WLVTerritory);
        user1.Vacation_Start_Date__c = Date.today().adddays(-5);
        user1.Vacation_End_Date__c = Date.today().adddays(10);
        //user1.managers__c = user2.Id;
        user1.managers__c = 'Heather Riggio';
        user1.FirstName = 'FName';
        User1.Team__c = WLVTerritory;
        allUsers.add(User1);
        //insert user1;      
        
        User user4 = Commissions_TestDataFactory.createUser(null,p.id,null,'test154244@move.com','test154244@move.com',false,ManagerTeam);
        user4.LastName ='Matthews';
        user4.FirstName='Adrian';
        user4.Team__c = ManagerTeam;
        allUsers.add(User4);
        //insert user4;
        
        User user3 = Commissions_TestDataFactory.createUser(null,p.id,null,'test1542@move.com','test1542@move.com',false,WLVTerritory);
        //user3.managers__c = user2.Id;
        user3.managers__c = 'Adrian Matthews';
        user3.FirstName = 'FName1';
        User3.Team__c = WLVTerritory;
        //insert user3;
        allUsers.add(User3);
        Insert allUsers;
        id rectypidaccount = Schema.SObjectType.Account.getRecordTypeInfosByName().get('B2B').getRecordTypeId();
       
        DisabledTrigger__c Dtrg = new DisabledTrigger__c(Name= 'Disabled',TaskTrigger__c = 'Test@test.com',AssetTrigger__c = 'test@test.com');
        insert Dtrg;       
        Account acc = new Account();
        acc.Name = 'Test';
        acc.ShippingStreet = 'Test Street';
        acc.ShippingCity = 'City';
        acc.ShippingState = 'State';
        acc.ShippingPostalCode = '12345';
        acc.Primary_Email__c = 'theAcc@move.com';
        acc.RecordTypeId = rectypidaccount;
        acc.Type = type;
        acc.OwnerId = user1.id;
        insert acc;
        
        Zuora__CustomerAccount__c cAccount = new Zuora__CustomerAccount__c();
        cAccount.Name = 'TestAccount';
        cAccount.Zuora__Account__c= Acc.Id;
        cAccount.Zuora__Zuora_Id__c = '2c92c0f94c750685014c78c1967e660a';
        insert cAccount; 
        system.debug('cAccount:' + cAccount.Id);
        
        Period__c period = Commissions_TestDataFactory.Createperiod('Test',false,Date.today().toStartOfMonth());
        period.Start_Date__c = date.today();
        period.Current_Quater__c = 'Q1';
        period.Agent_asset_Owner__c = 50;
        period.asset_Owner__c = 50;       
        insert period;
        
        Contract c =new Contract();
        c.Accountid=Acc.id;       
        insert c; 
        
        Product2 prdctdata = Commissions_TestDataFactory.CreateProduct('Name',false);
        prdctdata.Commission_Category__c = 'CFCB';
        insert prdctdata; 
         
        Id pricebookId= Test.getStandardPricebookId();        
        PricebookEntry standardPrice = new PricebookEntry(Pricebook2Id = pricebookId, Product2Id = prdctdata.Id, UnitPrice = 10000, IsActive = true);
        insert standardPrice;         
        Pricebook2 custompb = new Pricebook2(Name = 'Standard Price Book 2009', Description = 'Price Book 2009 Products', IsActive = true);
        insert custompb;            
        PricebookEntry custompbe = new PricebookEntry(Pricebook2Id = custompb.Id, Product2Id = prdctdata.Id, UnitPrice = 1, IsActive = true);
        insert custompbe;
           
        set<Id> ProductIds = new set<id>();
        ProductIds.add(prdctdata.id);
            
        Order r =new Order();       
        r.AccountId=Acc.id;
        r.Name='test';
        r.EffectiveDate=System.today();
        r.Contractid=c.id;
        r.Status='Created';
        r.Pricebook2Id = pricebookId;
        r.OwnerId = user1.id;
        insert r;
          
        OrderItem oi = new OrderItem(OrderId=r.id,Quantity=1,PricebookEntryId=standardPrice.id,unitPrice=1);
        insert oi;
        set<Id> orderOwnerIds = new set<id>();
        orderOwnerIds.add(user1.id);
        
        id rectypidasset = Schema.SObjectType.Asset.getRecordTypeInfosByName().get('Parent').getRecordTypeId();    
        Asset assets = Commissions_TestDataFactory.CreateAsset(rectypidasset,user1.Id,prdctdata.Id,false);
        assets.RecordTypeId = rectypidasset;
        assets.Name = 'test';
        assets.Ownerid = user2.id;
        assets.Renewal_Status__c = 'Renew';
        assets.Auto_Renewal__c = 'No';
        assets.Asset_Type__c = type1;
        assets.Product2Id = prdctdata.id;
        assets.Fulfillment_Status__c = fullfilled;
        assets.Status = status;
        assets.At_Risk__c = false;
        assets.Billing_Period__c = 'Monthly';
        assets.Start_Date__c = system.today();
        assets.End_Date__c = system.today().addDays(10);
        assets.Asset_Type__c = 'Parent';
        assets.Auto_Renewal__c  = 'Yes';
        assets.Line_Type__c = 'Add';
        assets.Price = 10.00;
        assets.Sign_in_AE__c= user1.id;
        assets.Commission_field__c='Ignore';
        assets.Total_Net__c = 1200.00;
        assets.Delta_Price__c = -120.00;
        assets.Order_Line_Item__c = oi.id;
        assets.AccountId = acc.id;      
        insert assets;
        assets.Line_Type__c = 'Renew';
        update assets;
        
        id rectypidp = Schema.SObjectType.Payout__c.getRecordTypeInfosByName().get(WLVTerritory).getRecordTypeId(); 
        Payout__c pa= Commissions_TestDataFactory.CreatePayout('New Sale without Qualifier',rectypidp, 10.00, 50.00,null,null,2.25,1.05,2.02,3.00,false);
        pa.Period__c = period.Id;
        insert pa; 
        List<Quota__c> allQuotas = new List<Quota__c>();     
        Quota__c  QuotaHandler = Commissions_TestDataFactory.CreateQuota(user1.id,period.id,false);
        QuotaHandler.Target_Amount__c = 1000;
        QuotaHandler.User__c= User1.Id;
        QuotaHandler.User_Team__c = WLVTerritory;
        QuotaHandler.Period_Name__c = period.id;
        QuotaHandler.Target_Amount_2__c = 1000; 
       
        //insert QuotaHandler;
        allQuotas.add(QuotaHandler);
        Quota__c  QuotaHandler1 = Commissions_TestDataFactory.CreateQuota(user3.id,period.id,false);
        QuotaHandler1.Target_Amount__c = 1000;
        QuotaHandler1.User__c= user3.Id;
        QuotaHandler1.User_Team__c = WLVTerritory;
        QuotaHandler1.Period_Name__c = period.id;
        QuotaHandler1.Target_Amount_2__c = 1000;   
                
        //insert QuotaHandler1;
        allQuotas.add(QuotaHandler1);
        Quota__c  QuotaHandlerM = Commissions_TestDataFactory.CreateQuota(user2.id,period.id,false);
        QuotaHandlerM.Target_Amount__c = 1000;
        QuotaHandlerM.User__c= user2.Id;
        QuotaHandlerM.User_Team__c = ManagerTeam;
        QuotaHandlerM.Period_Name__c = period.id;
        QuotaHandlerM.Target_Amount_2__c = 1000;   
              
        //insert QuotaHandlerM;
        allQuotas.add(QuotaHandlerM);
        Quota__c  QuotaHandlerM1 = Commissions_TestDataFactory.CreateQuota(user4.id,period.id,false);
        QuotaHandlerM1.Target_Amount__c = 1000;
        QuotaHandlerM1.User__c= user4.Id;
        QuotaHandlerM1.User_Team__c = ManagerTeam;
        QuotaHandlerM1.Period_Name__c = period.id;
        QuotaHandlerM1.Target_Amount_2__c = 1000; 
                
        //insert QuotaHandlerM1;
        allQuotas.add(QuotaHandlerM1); 
        insert allQuotas;  
        Map<Id, Asset> newTriggerValues = new Map<Id, Asset> ();
        newTriggerValues.put(assets.Id,assets);
        List<Commission__c> allcommissions = new List<Commission__c>();   
        id rectypidq = Schema.SObjectType.Commission__c.getRecordTypeInfosByName().get('Other Products').getRecordTypeId();  
        Commission__c  comm = Commissions_TestDataFactory.CreateComm(QuotaHandler.Id, prdctdata.Id,rectypidq,null,false);
        comm.Related_to_Asset__c = assets.Id;
        comm.Asset_Amount__c = 100;
        comm.user_team__c = WLVTerritory;
        //insert comm;   
        allcommissions.add(comm);
        Commission__c  comm1 = Commissions_TestDataFactory.CreateComm(QuotaHandlerM.Id, prdctdata.Id,rectypidq,null,false);
        comm1.Related_to_Asset__c = assets.Id;
        comm1.Asset_Amount__c = 100;
        comm1.user_team__c = ManagerTeam;
        //insert comm1; 
        allcommissions.add(comm1);
        Commission__c  comm2 = Commissions_TestDataFactory.CreateComm(QuotaHandlerM.Id, prdctdata.Id,rectypidq,null,false);
        comm2.Related_to_Asset__c = assets.Id;
        comm2.Asset_Amount__c = 100;
        comm2.user_team__c = ManagerTeam;
        //insert comm2;
        allcommissions.add(comm2);
        Commission__c  comm3 = Commissions_TestDataFactory.CreateComm(QuotaHandlerM1.Id, prdctdata.Id,rectypidq,null,false);
        comm3.Related_to_Asset__c = assets.Id;
        comm3.Asset_Amount__c = 100;
        comm3.user_team__c = ManagerTeam;
        //insert comm3;
        allcommissions.add(comm3);
        insert allcommissions;
        set<id> allCommissionIds= new set<id>();
        allCommissionIds.add(comm.id);
        allCommissionIds.add(comm1.id);
        allCommissionIds.add(comm2.id);
        allCommissionIds.add(comm3.id);
        
        Map<Id, Asset> fullfilledAssets = new Map<Id, Asset> ();
        fullfilledAssets.put(assets.Id , assets);
        Test.startTest();
        Commissions_CreateCommissionsHandler.CreateCommissions(newTriggerValues);
        Commissions_CreateCommissionsHandler ch = new  Commissions_CreateCommissionsHandler();
        ch.UpdateCommissions(newTriggerValues);
        
        Commissions_CreateNewCommissionsHandler ch1 = new  Commissions_CreateNewCommissionsHandler();
        ch1.CreateCommissions(fullfilledAssets);
        
        
        Test.stopTest();
    }
    public static testMethod void mainTest2() {
        String ManagerTeam = Commissions_Constants.MANAGERS_TEAM;
        String WLVTerritory = Commissions_Constants.WLV_TERRITORY_TEAM;  
        string status = Constants.ACTIVE_STATUS;
        string fullfilled = Constants.FULFILLMENT_STATUS;
        string type1 = Constants.ASSET_TYPE;
        string type = Constants.OFFICE_ACCOUNT_TYPE;
        Integer Year = Date.Today().Year(); 
        List<User> allUsers =new List<User>();
        Profile p = [select id from profile where name='System Administrator'];
        Profile p1 = [select id from profile where name='Open Book Profile'];
        User user2 = Commissions_TestDataFactory.createUser(Null,p.id,null,'test1541@move.com','test1541@move.com',false,ManagerTeam);
        user2.Vacation_Start_Date__c = Date.today();
        user2.Vacation_End_Date__c = Date.today();
        User2.Team__c = ManagerTeam;
        User2.LastName ='Riggio';
        User2.FirstName='Heather';
        //Insert User2;
        allUsers.add(User2);
        User user1 = Commissions_TestDataFactory.createUser(null,p.id,null,'test154@move.com','test154@move.com',false,WLVTerritory);
        user1.Vacation_Start_Date__c = Date.today().adddays(-5);
        user1.Vacation_End_Date__c = Date.today().adddays(10);
        //user1.managers__c = user2.Id;
        user1.managers__c = 'Heather Riggio';
        user1.FirstName = 'FName';
        User1.Team__c = WLVTerritory;
        //insert user1;      
        allUsers.add(User1);
        User user3 = Commissions_TestDataFactory.createUser(null,p1.id,null,'test1542@move.com','test1542@move.com',false,WLVTerritory);
        user3.Vacation_Start_Date__c = Date.today();
        user3.Vacation_End_Date__c = Date.today();
        //user3.managers__c = user2.Id;
        user3.managers__c = 'Heather Riggio';
        user3.FirstName = 'FName1';
        User3.Team__c = WLVTerritory;
        //insert user3;
        allUsers.add(User3);
        Insert allUsers;
        id rectypidaccount = Schema.SObjectType.Account.getRecordTypeInfosByName().get('B2B').getRecordTypeId();
       
        DisabledTrigger__c Dtrg = new DisabledTrigger__c(Name= 'Disabled',TaskTrigger__c = 'Test@test.com',AssetTrigger__c = 'test@test.com');
        insert Dtrg;       
        Account acc = new Account();
        acc.Name = 'Test';
        acc.ShippingStreet = 'Test Street';
        acc.ShippingCity = 'City';
        acc.ShippingState = 'State';
        acc.ShippingPostalCode = '12345';
        acc.Primary_Email__c = 'theAcc@move.com';
        acc.RecordTypeId = rectypidaccount;
        acc.Type = type;
        acc.OwnerId = user1.id;
        insert acc;
        
        Zuora__CustomerAccount__c cAccount = new Zuora__CustomerAccount__c();
        cAccount.Name = 'TestAccount';
        cAccount.Zuora__Account__c= Acc.Id;
        cAccount.Zuora__Zuora_Id__c = '2c92c0f94c750685014c78c1967e660a';
        insert cAccount; 
        system.debug('cAccount:' + cAccount.Id);
        
        Period__c period = Commissions_TestDataFactory.Createperiod('Test',false,Date.today().toStartOfMonth());
        period.Start_Date__c = date.today();
        period.Current_Quater__c = 'Q1';
        period.Agent_asset_Owner__c = 50;
        period.asset_Owner__c = 50;       
        insert period;
        
        Contract c =new Contract();
        c.Accountid=Acc.id;       
        insert c; 
        
        Product2 prdctdata = Commissions_TestDataFactory.CreateProduct('Name',false);
        prdctdata.Commission_Category__c = 'CFCB';
        insert prdctdata; 
         
        Id pricebookId= Test.getStandardPricebookId();        
        PricebookEntry standardPrice = new PricebookEntry(Pricebook2Id = pricebookId, Product2Id = prdctdata.Id, UnitPrice = 10000, IsActive = true);
        insert standardPrice;         
        Pricebook2 custompb = new Pricebook2(Name = 'Standard Price Book 2009', Description = 'Price Book 2009 Products', IsActive = true);
        insert custompb;            
        PricebookEntry custompbe = new PricebookEntry(Pricebook2Id = custompb.Id, Product2Id = prdctdata.Id, UnitPrice = 1, IsActive = true);
        insert custompbe;
           
        set<Id> ProductIds = new set<id>();
        ProductIds.add(prdctdata.id);
            
        Order r =new Order();       
        r.AccountId=Acc.id;
        r.Name='test';
        r.EffectiveDate=System.today();
        r.Contractid=c.id;
        r.Status='Created';
        r.Pricebook2Id = pricebookId;
        r.OwnerId = user1.id;
        insert r;
          
        OrderItem oi = new OrderItem(OrderId=r.id,Quantity=1,PricebookEntryId=standardPrice.id,unitPrice=1);
        insert oi;
        set<Id> orderOwnerIds = new set<id>();
        orderOwnerIds.add(user1.id);
        
        id rectypidasset = Schema.SObjectType.Asset.getRecordTypeInfosByName().get('Parent').getRecordTypeId();    
        Asset assets = Commissions_TestDataFactory.CreateAsset(rectypidasset,user1.Id,prdctdata.Id,false);
        assets.RecordTypeId = rectypidasset;
        assets.Name = 'test';
        assets.Ownerid = user3.id;
        assets.Renewal_Status__c = 'Renew';
        assets.Auto_Renewal__c = 'No';
        assets.Asset_Type__c = type1;
        assets.Product2Id = prdctdata.id;
        assets.Fulfillment_Status__c = 'fullfilled';
        assets.Status = status;
        assets.At_Risk__c = false;
        assets.Billing_Period__c = 'Monthly';
        assets.Start_Date__c = system.today();
        assets.End_Date__c = system.today().addDays(10);
        assets.Asset_Type__c = 'Parent';
        assets.Auto_Renewal__c  = 'Yes';
        assets.Line_Type__c = 'renew';
        assets.Price = 10.00;
        assets.Sign_in_AE__c= user1.id;
        assets.Commission_field__c='Ignore';
        assets.Total_Net__c = 1200.00;
        assets.Delta_Price__c = -120.00;
        assets.Order_Line_Item__c = oi.id;
        assets.AccountId = acc.id;      
        insert assets;
        assets.Line_Type__c = 'Amend';
        update assets;       

        
        id rectypidp = Schema.SObjectType.Payout__c.getRecordTypeInfosByName().get(WLVTerritory).getRecordTypeId(); 
        Payout__c pa= Commissions_TestDataFactory.CreatePayout('New Sale without Qualifier',rectypidp, 10.00, 50.00,null,null,2.25,1.05,2.02,3.00,false);
        pa.Period__c = period.Id;
        insert pa;  
        List<Quota__c> allQuotas = new List<Quota__c>();      
        Quota__c  QuotaHandler = Commissions_TestDataFactory.CreateQuota(user1.id,period.id,false);
        QuotaHandler.Target_Amount__c = 1000;
        QuotaHandler.User__c= User1.Id;
        QuotaHandler.User_Team__c = WLVTerritory;
        QuotaHandler.Period_Name__c = period.id;
        QuotaHandler.Target_Amount_2__c = 1000; 
        
        //insert QuotaHandler;
        allQuotas.add(QuotaHandler);
        Quota__c  QuotaHandler1 = Commissions_TestDataFactory.CreateQuota(user3.id,period.id,false);
        QuotaHandler1.Target_Amount__c = 1000;
        QuotaHandler1.User__c= user3.Id;
        QuotaHandler1.User_Team__c = WLVTerritory;
        QuotaHandler1.Period_Name__c = period.id;
        QuotaHandler1.Target_Amount_2__c = 1000; 
      
        allQuotas.add(QuotaHandler1);
        
        Quota__c  QuotaHandlerM = Commissions_TestDataFactory.CreateQuota(user2.id,period.id,false);
        QuotaHandlerM.Target_Amount__c = 1000;
        QuotaHandlerM.User__c= user2.Id;
        QuotaHandlerM.User_Team__c = ManagerTeam;
        QuotaHandlerM.Period_Name__c = period.id;
        QuotaHandlerM.Target_Amount_2__c = 1000;   
           
        //insert QuotaHandlerM;
        allQuotas.add(QuotaHandlerM);
        insert allQuotas;   
        Map<Id, Asset> newTriggerValues = new Map<Id, Asset> ();
        newTriggerValues.put(assets.Id,assets);
        List<Commission__c>  allCommissions = new List<Commission__c>();
        id rectypidq = Schema.SObjectType.Commission__c.getRecordTypeInfosByName().get('Other Products').getRecordTypeId();  
        Commission__c  comm = Commissions_TestDataFactory.CreateComm(QuotaHandler.Id, prdctdata.Id,rectypidq,null,false);
        comm.Related_to_Asset__c = assets.Id;
        comm.Asset_Amount__c = 100;
        comm.user_team__c = WLVTerritory;
        //insert comm;   
        allCommissions.add(comm);
        Commission__c  comm1 = Commissions_TestDataFactory.CreateComm(QuotaHandlerM.Id, prdctdata.Id,rectypidq,null,false);
        comm1.Related_to_Asset__c = assets.Id;
        comm1.Asset_Amount__c = 100;
        comm1.user_team__c = ManagerTeam;
        //insert comm1; 
        allCommissions.add(comm1);
        Commission__c  comm2 = Commissions_TestDataFactory.CreateComm(QuotaHandlerM.Id, prdctdata.Id,rectypidq,null,false);
        comm2.Related_to_Asset__c = assets.Id;
        comm2.Asset_Amount__c = 100;
        comm2.user_team__c = ManagerTeam;
        //insert comm2;
        allCommissions.add(comm2);
        insert  allCommissions;
        set<id> allCommissionIds= new set<id>();
        allCommissionIds.add(comm.id);
        allCommissionIds.add(comm1.id);
        allCommissionIds.add(comm2.id);
        
        Map<Id, Asset> fullfilledAssets = new Map<Id, Asset> ();
        fullfilledAssets.put(assets.Id , assets);
        
        Test.startTest();
        Commissions_CreateCommissionsHandler.CreateCommissions(newTriggerValues);
        Commissions_CreateCommissionsHandler ch = new  Commissions_CreateCommissionsHandler();
        ch.UpdateCommissions(newTriggerValues);
        
        Commissions_CreateNewCommissionsHandler ch1 = new  Commissions_CreateNewCommissionsHandler();
        ch1.CreateCommissions(fullfilledAssets );
        Test.stopTest();
    }
     public static testMethod void mainTest3() {
        String ManagerTeam = Commissions_Constants.MANAGERS_TEAM;
        String WLVTerritory = Commissions_Constants.WLV_TERRITORY_TEAM;  
        string status = Constants.ACTIVE_STATUS;
        string fullfilled = Constants.FULFILLMENT_STATUS;
        string type1 = Constants.ASSET_TYPE;
        string type = Constants.OFFICE_ACCOUNT_TYPE;
        Integer Year = Date.Today().Year(); 
        List<User>  allUsers = new List<User>();
        Profile p = [select id from profile where name='System Administrator'];
        Profile p1 = [select id from profile where name='Open Book Profile'];
        User user2 = Commissions_TestDataFactory.createUser(Null,p.id,null,'test1541@move.com','test1541@move.com',false,ManagerTeam);
        user2.Vacation_Start_Date__c = Date.today();
        user2.Vacation_End_Date__c = Date.today();
        User2.Team__c = ManagerTeam;
        User2.LastName ='Riggio';
        User2.FirstName='Heather';
        user2.Vacation_Start_Date__c = Date.today().addDays(-5);
        user2.Vacation_End_Date__c = Date.today().addDays(5);
        //Insert User2;
        allUsers.add(User2);
        User user1 = Commissions_TestDataFactory.createUser(null,p.id,null,'test154@move.com','test154@move.com',false,WLVTerritory);
        user1.Vacation_Start_Date__c = Date.today().adddays(-5);
        user1.Vacation_End_Date__c = Date.today().adddays(10);
        //user1.managers__c = user2.Id;
        user1.managers__c = 'Heather Riggio';
        user1.FirstName = 'FName';
        User1.Team__c = WLVTerritory;
        user1.Vacation_Start_Date__c = Date.today().addDays(-5);
        user1.Vacation_End_Date__c = Date.today().addDays(5);
        //insert user1;      
        allUsers.add(User1);
        User user3 = Commissions_TestDataFactory.createUser(null,p1.id,null,'test1542@move.com','test1542@move.com',false,WLVTerritory);
        user3.Vacation_Start_Date__c = Date.today();
        user3.Vacation_End_Date__c = Date.today();
        //user3.managers__c = user2.Id;
        user3.managers__c = 'Heather Riggio';
        user3.FirstName = 'FName1';
        User3.Team__c = WLVTerritory;
        user3.Vacation_Start_Date__c = Date.today().addDays(-5);
        user3.Vacation_End_Date__c = Date.today().addDays(5);
        //insert user3;
        allUsers.add(User3);
        User user4 = Commissions_TestDataFactory.createUser(null,p.id,null,'test15422@move.com','test15422@move.com',false,WLVTerritory);
        user4.Vacation_Start_Date__c = Date.today();
        user4.Vacation_End_Date__c = Date.today();
        //user3.managers__c = user2.Id;
        user4.managers__c = 'Heather Riggio';
        user4.FirstName = 'FName1';
        user4.Vacation_Start_Date__c = Date.today().addDays(-5);
        user4.Vacation_End_Date__c = Date.today().addDays(5);
        User4.Team__c = WLVTerritory;
        //insert user4;
        allUsers.add(User4);
        Insert allUsers;
        id rectypidaccount = Schema.SObjectType.Account.getRecordTypeInfosByName().get('B2B').getRecordTypeId();
       
        DisabledTrigger__c Dtrg = new DisabledTrigger__c(Name= 'Disabled',TaskTrigger__c = 'Test@test.com',AssetTrigger__c = 'test@test.com');
        insert Dtrg;       
        Account acc = new Account();
        acc.Name = 'Test';
        acc.ShippingStreet = 'Test Street';
        acc.ShippingCity = 'City';
        acc.ShippingState = 'State';
        acc.ShippingPostalCode = '12345';
        acc.Primary_Email__c = 'theAcc@move.com';
        acc.RecordTypeId = rectypidaccount;
        acc.Type = type;
        acc.OwnerId = user1.id;
        insert acc;
        
        Zuora__CustomerAccount__c cAccount = new Zuora__CustomerAccount__c();
        cAccount.Name = 'TestAccount';
        cAccount.Zuora__Account__c= Acc.Id;
        cAccount.Zuora__Zuora_Id__c = '2c92c0f94c750685014c78c1967e660a';
        insert cAccount; 
        system.debug('cAccount:' + cAccount.Id);
        
        Period__c period = Commissions_TestDataFactory.Createperiod('Test',false,Date.today().toStartOfMonth());
        period.Start_Date__c = date.today();
        period.End_Date__c = date.today().addDays(30);
        period.Current_Quater__c = 'Q1';
        period.Agent_asset_Owner__c = 50;
        period.asset_Owner__c = 50;       
        insert period;
        
        Contract c =new Contract();
        c.Accountid=Acc.id;       
        insert c; 
        
        Product2 prdctdata = Commissions_TestDataFactory.CreateProduct('Name',false);
        prdctdata.Commission_Category__c = 'CFCB';
        insert prdctdata; 
         
        Id pricebookId= Test.getStandardPricebookId();        
        PricebookEntry standardPrice = new PricebookEntry(Pricebook2Id = pricebookId, Product2Id = prdctdata.Id, UnitPrice = 10000, IsActive = true);
        insert standardPrice;         
        Pricebook2 custompb = new Pricebook2(Name = 'Standard Price Book 2009', Description = 'Price Book 2009 Products', IsActive = true);
        insert custompb;            
        PricebookEntry custompbe = new PricebookEntry(Pricebook2Id = custompb.Id, Product2Id = prdctdata.Id, UnitPrice = 1, IsActive = true);
        insert custompbe;
           
        set<Id> ProductIds = new set<id>();
        ProductIds.add(prdctdata.id);
            
        Order r =new Order();       
        r.AccountId=Acc.id;
        r.Name='test';
        r.EffectiveDate=System.today();
        r.Contractid=c.id;
        r.Status='Created';
        r.Pricebook2Id = pricebookId;
        r.OwnerId = user1.id;
        insert r;
          
        OrderItem oi = new OrderItem(OrderId=r.id,Quantity=1,PricebookEntryId=standardPrice.id,unitPrice=1);
        insert oi;
        set<Id> orderOwnerIds = new set<id>();
        orderOwnerIds.add(user1.id);
        
        id rectypidasset = Schema.SObjectType.Asset.getRecordTypeInfosByName().get('Parent').getRecordTypeId();    
        Asset assets = Commissions_TestDataFactory.CreateAsset(rectypidasset,user1.Id,prdctdata.Id,false);
        assets.RecordTypeId = rectypidasset;
        assets.Name = 'test';
        assets.Ownerid = user3.id;
        assets.Renewal_Status__c = 'Renew';
        assets.Auto_Renewal__c = 'No';
        assets.Asset_Type__c = type1;
        assets.Product2Id = prdctdata.id;
        assets.Fulfillment_Status__c = fullfilled;
        assets.Status = status;
        assets.At_Risk__c = false;
        assets.Billing_Period__c = 'Monthly';
        assets.Start_Date__c = system.today();
        assets.End_Date__c = system.today().addDays(10);
        assets.Asset_Type__c = 'Parent';
        assets.Auto_Renewal__c  = 'Yes';
        assets.Line_Type__c = 'renew';
        assets.Price = 10.00;
        assets.Sign_in_AE__c= user1.id;
        assets.Commission_field__c='Ignore';
        assets.Total_Net__c = 1200.00;
        assets.Delta_Price__c = 120.00;
        assets.Order_Line_Item__c = oi.id;
        assets.AccountId = acc.id;      
        insert assets;
        assets.Line_Type__c = 'Amend';
        update assets;
        
        Asset assets1 = Commissions_TestDataFactory.CreateAsset(rectypidasset,user1.Id,prdctdata.Id,false);
        assets1.RecordTypeId = rectypidasset;
        assets1.Name = 'test';
        assets1.Ownerid = user4.id;
        assets1.Renewal_Status__c = 'Renew';
        assets1.Auto_Renewal__c = 'No';
        assets1.Asset_Type__c = type1;
        assets1.Product2Id = prdctdata.id;
        assets1.Fulfillment_Status__c = fullfilled;
        assets1.Status = status;
        assets1.At_Risk__c = false;
        assets1.Billing_Period__c = 'Monthly';
        assets1.Start_Date__c = system.today();
        assets1.End_Date__c = system.today().addDays(10);
        assets1.Asset_Type__c = 'Parent';
        assets1.Auto_Renewal__c  = 'Yes';
        assets1.Line_Type__c = 'renew';
        assets1.Price = 10.00;
        assets1.Sign_in_AE__c= user1.id;
        assets1.Commission_field__c='Ignore';
        assets1.Total_Net__c = 1200.00;
        assets1.Delta_Price__c = 120.00;
        assets1.Order_Line_Item__c = oi.id;
        assets1.AccountId = acc.id;      
        insert assets1;
        assets.Line_Type__c = 'Add';
        update assets1;
        
        id rectypidp = Schema.SObjectType.Payout__c.getRecordTypeInfosByName().get(WLVTerritory).getRecordTypeId(); 
        Payout__c pa= Commissions_TestDataFactory.CreatePayout('New Sale without Qualifier',rectypidp, 10.00, 50.00,null,null,2.25,1.05,2.02,3.00,false);
        pa.Period__c = period.Id;
        insert pa;
        List<Quota__c> allQuotas = new List<Quota__c>();       
        Quota__c  QuotaHandler = Commissions_TestDataFactory.CreateQuota(user1.id,period.id,false);
        QuotaHandler.Target_Amount__c = 1000;
        QuotaHandler.User__c= User1.Id;
        QuotaHandler.User_Team__c = WLVTerritory;
        QuotaHandler.Period_Name__c = period.id;
        QuotaHandler.Target_Amount_2__c = 1000;
         
        //insert QuotaHandler;
        allQuotas.add(QuotaHandler);
        Quota__c  QuotaHandler1 = Commissions_TestDataFactory.CreateQuota(user4.id,period.id,false);
        QuotaHandler1.Target_Amount__c = 1000;
        QuotaHandler1.User__c= user4.Id;
        QuotaHandler1.User_Team__c = WLVTerritory;
        QuotaHandler1.Period_Name__c = period.id;
        QuotaHandler1.Target_Amount_2__c = 1000;
                  
        //insert QuotaHandler1;
        allQuotas.add(QuotaHandler1);
        Quota__c  QuotaHandlerM = Commissions_TestDataFactory.CreateQuota(user2.id,period.id,false);
        QuotaHandlerM.Target_Amount__c = 1000;
        QuotaHandlerM.User__c= user2.Id;
        QuotaHandlerM.User_Team__c = ManagerTeam;
        QuotaHandlerM.Period_Name__c = period.id;
        QuotaHandlerM.Target_Amount_2__c = 1000; 
                  
        //insert QuotaHandlerM;
        allQuotas.add(QuotaHandlerM);
        Insert allQuotas;   
        Map<Id, Asset> newTriggerValues = new Map<Id, Asset> ();
        newTriggerValues.put(assets.Id,assets);
        
        id rectypidq = Schema.SObjectType.Commission__c.getRecordTypeInfosByName().get('Other Products').getRecordTypeId();  
        List<Commission__c> allCommissions = new List<Commission__c>();
        Commission__c  comm = Commissions_TestDataFactory.CreateComm(QuotaHandler.Id, prdctdata.Id,rectypidq,null,false);
        comm.Related_to_Asset__c = assets.Id;
        comm.Asset_Amount__c = 100;
        comm.user_team__c = WLVTerritory;
        //insert comm;   
        allCommissions.add(comm);
        Commission__c  comm1 = Commissions_TestDataFactory.CreateComm(QuotaHandlerM.Id, prdctdata.Id,rectypidq,null,false);
        comm1.Related_to_Asset__c = assets.Id;
        comm1.Asset_Amount__c = 100;
        comm1.user_team__c = ManagerTeam;
        //insert comm1; 
        allCommissions.add(comm1);
        Commission__c  comm2 = Commissions_TestDataFactory.CreateComm(QuotaHandlerM.Id, prdctdata.Id,rectypidq,null,false);
        comm2.Related_to_Asset__c = assets.Id;
        comm2.Asset_Amount__c = 100;
        comm2.user_team__c = ManagerTeam;
        //insert comm2;
        allCommissions.add(comm2); 
        insert  allCommissions;
        set<id> allCommissionIds= new set<id>();
        allCommissionIds.add(comm.id);
        allCommissionIds.add(comm1.id);
        allCommissionIds.add(comm2.id);
        Map<Id, Asset> fullfilledAssets = new Map<Id, Asset> ();
        fullfilledAssets.put(assets.Id , assets);
        //fullfilledAssets.put(assets1.Id , assets1);
        Test.startTest();
        Commissions_CreateCommissionsHandler.CreateCommissions(newTriggerValues);
        Commissions_CreateCommissionsHandler ch = new  Commissions_CreateCommissionsHandler();
        ch.UpdateCommissions(newTriggerValues);
        
        Commissions_CreateNewCommissionsHandler ch1 = new  Commissions_CreateNewCommissionsHandler();
        ch1.CreateCommissions(fullfilledAssets );
        Test.stopTest();
    }
}